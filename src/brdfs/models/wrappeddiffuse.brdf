analytic

# Wrapped diffuse illumination model, based on ZJ's wrapped diffuse model

# parameter block

::begin parameters
float wangle 0 180 45
float atten  0 10 1
float nondiff 0 1   0.5
color color  0.5 0.5 0.5
::end parameters

# shader code block

::begin shader

const float PI = 3.14159265358979323846;

float toRadian(float degree)
{
    return degree / 180.f * PI;
}

vec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y)
{
    vec3 Nf = dot(N, V) > 0 ? N : -N;
    vec3 Ln = normalize(L);
    float gamma = 5;
    float wangle_radian = toRadian(wangle);

    #return color * (1 - acos(dot(Ln, Nf)) / wangle_radian);
    return color * (1 - nondiff) * pow(max((1 - acos(dot(Ln, Nf)) / wangle_radian), 0), atten);
}
