analytic

// Lawrence B. Wolff diffuse model, based in "Improved Diffuse Reflection //
// Models for Computer Vision", by Lawrence B. Wolff, Shree K. Nayar, and //
// Michael Oren. //

# parameter block

::begin parameters
float ior 1 5 1.5
float nondiff 0 1 0.5
color cl 0.5 0.5 0.5
::end parameters

# shader code block

::begin shader

// ior for air
const float AIR = 1.000293;

// formula for the Fresnel reflection factor for unpolarized light
// Reference : http://www.oceanopticsbook.info/view/surfaces/the_level_sea_surface
float nfresnel(float costheta, float eta)
{
    float g2 = sqrt(eta * eta - 1 + costheta * costheta);
    float A = g2 - costheta;
    float B = g2 + costheta;
    float AA = B * costheta - 1;
    float BB = A * costheta + 1;
    return 0.5 * (A * A / (B * B)) * (1 + AA * AA / (BB * BB));
}

/* "The diffuse reflection model proposed by Wolff, models reflection from
 * smooth dielectric materials as a combination of subsurface light scattering
 * distribution produced from internal inhomogeneities coupled with the 
 * refraction of externally incidend and internally scattered light at the 
 * air/surface dielectric boundary.", from "Improved Diffuse Reflection Models
 * for Computer Vision", by Lawrence B. Wolff, Shree K. Nayar, and
 * Michael Oren. */

 // Reference : http://www1.cs.columbia.edu/CAVE/publications/pdfs/Wolff_IJCV98.pdf

vec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y)
{
    float costheta_r = max(0, dot(V, N));
    float costheta_i = max(0, dot(L, N));

    /* first Fresnel term accounting for refraction of externally
	*  incident light. */
    float F = 1 - nfresnel(costheta_i, ior);
    vec3 cout = cl * (1 - nondiff) * F * costheta_i;

    /* getting cosine of transmitted angle, for the second Fresnel term,
	 * accounting for the refraction of internally scattered light. */
    float eta = AIR / ior;
    float costheta_t = sqrt(max(0, 1 - eta * eta) * (1 - costheta_r * costheta_r));
    float F2 = 1 - nfresnel(costheta_t, eta);

    return vec3(1) * nfresnel(costheta_t, eta);
}